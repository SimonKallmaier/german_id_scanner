import io
import os

import boto3
import streamlit as st
from openai import OpenAI
from PIL import Image

# Set AWS credentials from environment variables
AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")

TEXTRACT = boto3.client(
    "textract",
    aws_access_key_id=AWS_ACCESS_KEY_ID,
    aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
    region_name="eu-central-1",
)
OPENAI_CLIENT = OpenAI()


def cost_salary_scanner(num_input_tokens: int, num_output_tokens: int, model_type: str = "gpt-3.5-turbo") -> float:
    """
    Calculate the total cost of using AWS Textract and OpenAI's GPT model.

    :param num_input_tokens: Number of input tokens to the GPT model
    :param num_output_tokens: Number of output tokens generated by the GPT model
    :param model_type: Type of GPT model used, default is 'gpt-3.5-turbo-0125'
    :returns: Total cost in USD
    """
    # Price for Textract
    textract_cost = 1.5 / 1000  # Cost per page

    # Pricing structure for GPT models
    model_pricing = {
        "gpt-3.5-turbo": {"input": 1.50 / 1_000_000, "output": 1.50 / 1_000_000},
        # "gpt-3.5-turbo-instruct": {"input": 1.50 / 1_000_000, "output": 2.00 / 1_000_000},
    }

    # Calculate GPT model costs based on tokens
    input_price = model_pricing[model_type]["input"] * num_input_tokens
    output_price = model_pricing[model_type]["output"] * num_output_tokens

    # Total cost
    total_cost = textract_cost + input_price + output_price
    return total_cost


def get_completion(text: str, salary: bool = True):
    model = "gpt-3.5-turbo"
    if salary:
        prompt = f"You are a helpful assistant that needs to check the salary statements and extract the income before taxes and the final amount that is paid to the employee for the month (not year). The statements are in German. You will get the raw text: RAW_TEXT: {text} \n The output should a dictionary with the keys 'AUSZAHLUNG' and 'BRUTTO' and the corresponding values as floats."  # noqa E501
    else:
        prompt = f"You are a helpful assitant that needs to extract information from different National ID cards. The text is: RAW_TEXT: {text} \n The output should be a dictionary with the keys 'ID', 'Given Name', 'Surname', 'Nationality', 'Date of Birth', 'Place of Birth', 'Address', 'Date of Issue', 'Date of Expiry' and the corresponding values as strings."  # noqa E501

    # Request completion from the model
    completion = OPENAI_CLIENT.chat.completions.create(model=model, messages=[{"role": "user", "content": prompt}])
    num_input_tokens = completion.usage.prompt_tokens
    num_output_tokens = completion.usage.completion_tokens
    completion_message = completion.choices[0].message.content

    costs = cost_salary_scanner(
        num_input_tokens=num_input_tokens,
        num_output_tokens=num_output_tokens,
        model_type=model,
    )

    st.write(f"Total cost: ${costs:.4f} USD")
    return completion_message


def image_loader(image: Image.Image):
    imageBytes = io.BytesIO()
    try:
        print("Trying to save as JPEG")
        image.save(imageBytes, format="JPEG")
        imageBytes = imageBytes.getvalue()
    except OSError:
        print("Failed to save as JPEG, trying PNG")
        image.save(imageBytes, format="PNG")
        imageBytes = imageBytes.getvalue()

    if imageBytes is None:
        raise ValueError("Failed to load image.")

    return imageBytes


def get_text_information(image: Image.Image):
    imageBytes = image_loader(image)
    # Call Textract
    response = TEXTRACT.detect_document_text(Document={"Bytes": imageBytes})
    text = ""
    for item in response["Blocks"]:
        if item["BlockType"] == "LINE":
            text += f"{item['Text']} "
    return text
