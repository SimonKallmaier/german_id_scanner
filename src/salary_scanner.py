import ast

import boto3
import streamlit as st
from openai import OpenAI

from utils import get_text_information

client = OpenAI()
TEXTRACT = boto3.client("textract")


def cost_salary_scanner(num_input_tokens: int, num_output_tokens: int, model_type: str = "gpt-3.5-turbo") -> float:
    """
    Calculate the total cost of using AWS Textract and OpenAI's GPT model.

    :param num_input_tokens: Number of input tokens to the GPT model
    :param num_output_tokens: Number of output tokens generated by the GPT model
    :param model_type: Type of GPT model used, default is 'gpt-3.5-turbo-0125'
    :returns: Total cost in USD
    """
    # Price for Textract
    textract_cost = 1.5 / 1000  # Cost per page

    # Pricing structure for GPT models
    model_pricing = {
        "gpt-3.5-turbo": {"input": 0.50 / 1_000_000, "output": 1.50 / 1_000_000},
        # "gpt-3.5-turbo-instruct": {"input": 1.50 / 1_000_000, "output": 2.00 / 1_000_000},
    }

    # Calculate GPT model costs based on tokens
    input_price = model_pricing[model_type]["input"] * num_input_tokens
    output_price = model_pricing[model_type]["output"] * num_output_tokens

    # Total cost
    total_cost = textract_cost + input_price + output_price
    return total_cost


def get_completion(text: str):
    model = "gpt-3.5-turbo"

    prompt = f"You are a helpful assistant that needs to check the salary statements and extract the income before taxes and the final amount that is paid to the employee for the month (not year). The statements are in German. You will get the raw text: RAW_TEXT: {text} \n The output should a dictionary with the keys 'AUSZAHLUNG' and 'BRUTTO' and the corresponding values as floats."  # noqa E501

    # Calculate the number of tokens in the prompt
    num_input_tokens = len(prompt)

    # Request completion from the model
    completion = client.chat.completions.create(model=model, messages=[{"role": "user", "content": prompt}])

    # Extract completion details
    completion_message = completion.choices[0].message.content
    num_output_tokens = len(completion_message.split())

    costs = cost_salary_scanner(
        num_input_tokens=num_input_tokens,
        num_output_tokens=num_output_tokens,
        model_type=model,
    )

    st.write(f"Total cost: ${costs:.4f} USD")
    return completion_message


def get_salary_information(img) -> dict:
    text = get_text_information(img)
    salary_information = get_completion(text)
    return ast.literal_eval(salary_information)
